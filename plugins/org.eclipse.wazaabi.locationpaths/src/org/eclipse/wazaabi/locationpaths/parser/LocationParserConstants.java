/* Generated By:JavaCC: Do not edit this line. LocationParserConstants.java */
/******************************************************************************* * Copyright (c) 2010 Olivier Moises * * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *   Olivier Moises- initial API and implementation *******************************************************************************/
package org.eclipse.wazaabi.locationpaths.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LocationParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AXIS_SELF = 17;
  /** RegularExpression Id. */
  int AXIS_CHILD = 18;
  /** RegularExpression Id. */
  int AXIS_ATTRIBUTE = 19;
  /** RegularExpression Id. */
  int AXIS_REFERENCE = 20;
  /** RegularExpression Id. */
  int AXIS_VARIABLE = 21;
  /** RegularExpression Id. */
  int AXIS_DESCENDANT_OR_SELF = 22;
  /** RegularExpression Id. */
  int AXIS_PARENT = 23;
  /** RegularExpression Id. */
  int AXIS_CLASS = 24;
  /** RegularExpression Id. */
  int AXIS_PACKAGE = 25;
  /** RegularExpression Id. */
  int NODE = 26;
  /** RegularExpression Id. */
  int OR = 27;
  /** RegularExpression Id. */
  int AND = 28;
  /** RegularExpression Id. */
  int MOD = 29;
  /** RegularExpression Id. */
  int DIV = 30;
  /** RegularExpression Id. */
  int IDENTIFIER = 31;
  /** RegularExpression Id. */
  int LETTER = 32;
  /** RegularExpression Id. */
  int PART_LETTER = 33;
  /** RegularExpression Id. */
  int SLASH = 34;
  /** RegularExpression Id. */
  int SLASHSLASH = 35;
  /** RegularExpression Id. */
  int EQ = 36;
  /** RegularExpression Id. */
  int NEQ = 37;
  /** RegularExpression Id. */
  int Literal = 38;
  /** RegularExpression Id. */
  int Digit = 39;
  /** RegularExpression Id. */
  int Number = 40;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"*\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\"..\"",
    "\"@\"",
    "\"&\"",
    "\"$\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"self::\"",
    "\"child::\"",
    "\"attribute::\"",
    "\"reference::\"",
    "\"variable::\"",
    "\"descendant-or-self::\"",
    "\"parent::\"",
    "\"class::\"",
    "\"package::\"",
    "\"node\"",
    "\"or\"",
    "\"and\"",
    "\"mod\"",
    "\"div\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"/\"",
    "\"//\"",
    "\"=\"",
    "\"!=\"",
    "<Literal>",
    "<Digit>",
    "<Number>",
  };

}
